JS API
======

.. note:: Schematik currently provides a limited set of Javascript API, but these can be easily extended. Submit any new API request at `Issue Tracker <https://github.com/RishabhRawat/schematicGenerator/issues>`_

-------------------------------------------------------------

schematik
*********
This class represents the top level handle for creating any schematics.


**********
Attributes 
**********

.. _schematik.schematicInstance:
.. js:data:: schematicInstance
	
	Handle to the underlying C++ instance, related C++ API can be accessed using this. 

.. _schematik.diagramBlock:
.. js:data:: diagramBlock

	Handle to the svg div where the diagram is created


*********
Functions
*********

.. _schematik.schematik:
.. js:class:: schematik(div)

	:param string div: *id* of the svg block where the schematic is to be rendered

	Constructor to the schematik class

.. _schematik.processYosysJson:
.. js:function:: processYosysJson(jsonData)

	:param JSON jsonData: Input schematic information in json format 

	Automatically processes a data generated by YosysJS to form a complete design. Look at `Yosys JSON <http://www.clifford.at/yosys/cmd_json.html>`_ for more details

.. _schematik.getTerminalDirection:
.. js:function:: getTerminalDirection(direction)

	:param string direction: Possible values for direction are - "input", "output", "inout"
	:returns: A terminal direction enum
	
	.. note:: This is only useful when using with `topDesign.addSystemTerminal`_ and `module.addTerminal`_ where you need to send a direction enum as a parameter 

.. _schematik.doPlacement:
.. js:function:: doPlacement()

	Runs the placement algorithm on the topDesign instance

	.. note:: This does not return anything, for retrieving the results of placement algorithm see `schematik.getPlacedModulesJson`_
 
.. _schematik.getPlacedModulesJson:
.. js:function:: getPlacedModulesJson()
	
	:returns:   A JSON object containing placement data

	Returns the results of the placement algorithm in the form of a JSON string.

	.. note:: The string will need to be parsed to convert it into a Javascript object

.. _schematik.doRouting:
.. js:function:: doRouting()

	Runs the routing algorithm on the topDesign instance

	.. note:: This does not return anything, for retrieving the results of placement algorithm see `schematik.getRoutedNetsJson`_
	.. warning:: Calling this function without running the placement (or completely specifying placement yourself can upset people :P)
	.. error:: It can sometimes throw error when a suitable routing is not found, in such cases you might need to use a different placement for a possible solution to be found. I am currently working on guaranteeing a possible routing

.. _schematik.getRoutedNetsJson:
.. js:function:: getRoutedNetsJson()

	:returns:   A JSON object containing routing data

	Returns the results of the routing algorithm in the form of a JSON string.

	.. note:: The string will need to be parsed to convert it into a Javascript object

.. _schematik.drawPlacement:
.. js:function:: drawPlacement([placementData])

	:param JSON placementData: If provided uses this to render the placement else runs the placement algorithm to calculate placement and then renders it

	Renders the placement result.
	
	.. note:: All the rendering functions use snapsvg.js library

.. _schematik.drawRouting:
.. js:function:: drawRouting([routingData])

	:param JSON routingData: If provided uses this to render the routing else runs the routing algorithm to calculate routing and then renders it

	Runs the routing algorithms and renders the result.

	.. note:: All the rendering functions use snapsvg.js library


-------------------------------------------------------------

topDesign
*********

*********
Functions
*********

.. _topDesign.topDesign:
.. js:class:: topDesign()

	Constructor to the topDesign class. Provides direct access to the C++ classes
 
	.. note:: Do not use this class directly especially if you are working with YosysJS, use schematik class instead. Though you might need this for finer control.

.. _topDesign.createJsonSchematicFromJson:
.. js:function:: createJsonSchematicFromJson(jsonData)

	Creates the placement schematic directly from Yosys JSON data

	.. warning:: DEPRECATED!! do not use this, it will be removed in future releases


.. _topDesign.createDetailedJsonSchematicFromJson:
.. js:function:: createDetailedJsonSchematicFromJson()

	Creates the placement schematic directly from Yosys JSON data with debug mode on

	.. warning:: DEPRECATED!! do not use this, it will be removed in future releases

.. _topDesign.addModule:
.. js:function:: addModule(moduleName)

	:param string moduleName: A unique name for the new module
	:returns: A handle to the module object

	Creates a new module with the given name and returns the handle to the module.

.. _topDesign.getModule:
.. js:function:: getModule(moduleName)

	:param string moduleName: Name of the module
	:returns: A handle to the corresponding module object

	Returns the module with the given name if it exists.

	.. warning:: It might throw an error if the module does not exist, this will be changed to not throw an error in the future


.. _topDesign.addSystemTerminal:
.. js:function:: addSystemTerminal(terminalName, terminalType, width)

	:param string terminalName: A unique name for the terminal (unique among systemTerminals)
	:param enum terminalType: A enum denoting the direction of the terminal. See `schematik.getTerminalDirection`_ for getting the enum.
	:param integer width: Width of the terminal
	:returns: A handle to the new systemTerminal object


	Adds a system level terminal to the topDesign. 


.. _topDesign.getSystemTerminal:
.. js:function:: getSystemTerminal(terminalName)

	:param string terminalName: Name of the systemTerminal
	:returns: A handle to the corresponding systemTerminal object



.. _topDesign.doPlacement:
.. js:function:: doPlacement()

	Perform placement on the topDesign schematic.

.. _topDesign.getPlacedModulesJson:
.. js:function:: getPlacedModulesJson()
	
	:returns:   A JSON object containing placement data

	Returns the results of the placement algorithm in the form of a JSON string.

	.. note:: The string will need to be parsed to convert it into a Javascript object


.. _topDesign.doRouting:
.. js:function:: doRouting()

	Perform routing on the topDesign schematic.

	.. warning:: Calling this function without running the placement (or completely specifying placement yourself can upset people :P)
	.. error:: It can sometimes throw error when a suitable routing is not found, in such cases you might need to use a different placement for a possible solution to be found. I am currently working on guaranteeing a possible routing



.. _topDesign.getRoutedNetsJson:
.. js:function:: getRoutedNetsJson()
	
	:returns:   A JSON object containing routing data

	Returns the results of the routing algorithm in the form of a JSON string.

	.. note:: The string will need to be parsed to convert it into a Javascript object

-------------------------------------------------------

module
******

*********
Functions
*********

.. _module.setSize:
.. js:function:: setSize(width, height)

    :param integer width: width of the module
    :param integer height: height of the module

	Sets the dimensions of the module



.. _module.setPosition:
.. js:function:: setPosition(x, y)

    :param integer x: x position
    :param integer y: y position


    Sets the position of the module

    .. warning:: The position will be modified if the placement algorithm is run. This is useful if we of need to modify position of a module or for completely specifying the placement.

.. _module.getWidth:
.. js:function:: getWidth()

	:returns: Width of the module


.. _module.getHeight:
.. js:function:: getHeight()

	:returns: Height of the module


.. _module.getPositionX:
.. js:function:: getPositionX()

	:returns: X-axis position of the module


.. _module.getPositionY:
.. js:function:: getPositionY()

	:returns: Y-axis position of the module


.. _module.addTerminal:
.. js:function:: addTerminal(terminalName, type, width)

	:param string terminalName: A unique name for the terminal (unique among terminals of the corresponding module)
	:param enum terminalType: A enum denoting the direction of the terminal. See `schematik.getTerminalDirection`_ for getting the enum.
	:param integer width: Width of the terminal
	:returns: A handle to the new terminal object


.. _module.getTerminal:
.. js:function:: getTerminal(terminalName)

 	:param string terminalName: Name of the terminal
	:returns: A handle to the corresponding terminal object


----------------------------------------------------------

terminal
********

*********
Functions
*********


.. _terminal.partial:
.. js:function:: partial(highIndex, lowIndex)

	:param integer highIndex: 
	:param integer lowIndex: 
	:throw: When highIndex < lowIndex, or highIndex > width - 1 of the terminal 
	:returns: A spliced terminal with the given high and low indices

	Splices the terminal into another terminal

.. _terminal.connect:
.. js:function:: connect(otherTerminal)

	:param terminal otherTerminal: Other terminal to connect to
	:throw: If otherTerminal does not have the same width as this terminal

	Connects the two terminals

	.. note:: To connect two unequal width terminals first splice them using the `terminal.partial`_ function.

.. _terminal.getWidth:
.. js:function:: getWidth()

	:returns: the width of the terminal.
